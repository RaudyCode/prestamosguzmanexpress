# Documentación: Migración de Sistema de Préstamos a Tauri + Supabase

## Índice
1. [Descripción General del Proyecto](#descripcion)
2. [Estructura Actual del Proyecto](#estructura)
3. [Plan de Migración](#migracion)
4. [Cambios en la Arquitectura](#arquitectura)
5. [Modelo de Datos en Supabase](#modelo-datos)
6. [Guía de Implementación](#implementacion)

## 1. Descripción General del Proyecto <a name="descripcion"></a>

El proyecto actual es un sistema de gestión de préstamos desarrollado con:
- Backend: Node.js + Express
- Frontend: Pug templates + TailwindCSS
- Base de datos: MySQL con Sequelize
- Autenticación: Sistema propio con JWT

### Funcionalidades Principales
- Gestión de usuarios y autenticación
- Administración de clientes
- Control de préstamos
- Gestión de pagos
- Sistema de rutas
- Configuraciones del sistema
- API REST para integraciones

## 2. Estructura Actual del Proyecto <a name="estructura"></a>

```
├── config/
│   └── db.js                 # Configuración de base de datos
├── controllers/              # Controladores MVC
├── helpers/                 # Utilidades y funciones auxiliares
├── middleware/              # Middleware de Express
├── modules/                 # Modelos de Sequelize
├── public/                  # Archivos estáticos
├── routes/                  # Rutas de Express
├── seed/                    # Scripts de población de datos
├── views/                   # Templates Pug
└── index.js                 # Punto de entrada
```

## 3. Plan de Migración <a name="migracion"></a>

### 3.1 Nueva Estructura Propuesta (Tauri + React)

```
src/
├── components/              # Componentes React
├── pages/                   # Páginas de la aplicación
├── hooks/                   # Custom hooks
├── store/                   # Estado global (Zustand)
├── services/               # Servicios de Supabase
├── utils/                  # Utilidades
└── App.tsx                 # Componente principal
```

### 3.2 Tecnologías a Implementar

- **Frontend**:
  - React + TypeScript
  - TailwindCSS (mantener)
  - Zustand (gestión de estado)
  - React Router
  - React Query

- **Backend**:
  - Supabase (reemplaza Express + MySQL)
  - Tauri (shell nativo)

- **Base de Datos**:
  - PostgreSQL (Supabase)
  - SQLite (almacenamiento local)

## 4. Cambios en la Arquitectura <a name="arquitectura"></a>

### 4.1 Autenticación
```typescript
// Actual (JWT) -> Supabase Auth
import { supabase } from '../lib/supabase';

const signIn = async (email: string, password: string) => {
  const { user, error } = await supabase.auth.signIn({ email, password });
  return { user, error };
};
```

### 4.2 Base de Datos
- Migrar modelos Sequelize a tablas Supabase
- Implementar RLS (Row Level Security)
- Sincronización offline con SQLite

## 5. Modelo de Datos en Supabase <a name="modelo-datos"></a>

### 5.1 Tablas Principales

```sql
-- Usuarios (gestionado por Supabase Auth)
create table public.profiles (
  id uuid references auth.users primary key,
  nombre text,
  email text,
  role text
);

-- Clientes
create table public.clientes (
  id uuid primary key default uuid_generate_v4(),
  nombre text,
  telefono text,
  direccion text,
  created_at timestamp with time zone default timezone('utc'::text, now())
);

-- Préstamos
create table public.prestamos (
  id uuid primary key default uuid_generate_v4(),
  cliente_id uuid references public.clientes,
  monto decimal,
  interes decimal,
  estado text,
  created_at timestamp with time zone default timezone('utc'::text, now())
);

-- Pagos
create table public.pagos (
  id uuid primary key default uuid_generate_v4(),
  prestamo_id uuid references public.prestamos,
  monto decimal,
  fecha timestamp with time zone,
  created_at timestamp with time zone default timezone('utc'::text, now())
);
```

### 5.2 Políticas de Seguridad (RLS)

```sql
-- Ejemplo de política para clientes
create policy "Usuarios pueden ver sus propios clientes"
  on public.clientes
  for select
  using (auth.uid() = user_id);
```

## 6. Guía de Implementación <a name="implementacion"></a>

### 6.1 Configuración de Tauri

```toml
# src-tauri/tauri.conf.json
{
  "build": {
    "distDir": "../dist",
    "devPath": "http://localhost:3000"
  },
  "bundle": {
    "active": true
  },
  "security": {
    "csp": "default-src 'self' https://your-supabase-project.supabase.co"
  }
}
```

### 6.2 Integración con Supabase

```typescript
// src/lib/supabase.ts
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

export const supabase = createClient(supabaseUrl, supabaseKey);
```

### 6.3 Almacenamiento Local

```typescript
// src/lib/localDb.ts
import Database from 'better-sqlite3';

const db = new Database('prestamos.db', { verbose: console.log });

// Crear tablas locales
db.exec(`
  CREATE TABLE IF NOT EXISTS clientes (
    id TEXT PRIMARY KEY,
    nombre TEXT,
    telefono TEXT,
    direccion TEXT,
    sincronizado INTEGER DEFAULT 0
  )
`);
```

### 6.4 Sincronización

```typescript
// src/services/sync.ts
export const syncData = async () => {
  // 1. Obtener cambios locales no sincronizados
  const localChanges = await getUnsyncedChanges();
  
  // 2. Subir a Supabase
  await uploadToSupabase(localChanges);
  
  // 3. Obtener cambios de Supabase
  const remoteChanges = await getSupabaseChanges();
  
  // 4. Actualizar BD local
  await updateLocalDb(remoteChanges);
};
```

### 6.5 Pasos de Migración

1. **Preparación**:
   - Configurar proyecto Tauri
   - Crear proyecto Supabase
   - Migrar esquema de base de datos

2. **Frontend**:
   - Convertir templates Pug a componentes React
   - Implementar rutas con React Router
   - Migrar lógica de controladores a hooks

3. **Backend**:
   - Configurar Supabase RLS
   - Implementar funciones Edge en Supabase
   - Crear API helpers para Supabase

4. **Datos**:
   - Migrar datos existentes
   - Implementar sincronización
   - Pruebas de integridad

5. **Despliegue**:
   - Configurar CI/CD
   - Pruebas de empaquetado
   - Distribución inicial

### 6.6 Consideraciones de Seguridad

- Implementar cifrado en SQLite local
- Configurar políticas RLS en Supabase
- Manejar tokens de forma segura
- Implementar respaldo automático

### 6.7 Pruebas

```typescript
// src/__tests__/sync.test.ts
import { describe, it, expect } from 'vitest';
import { syncData } from '../services/sync';

describe('Sincronización', () => {
  it('debe sincronizar cambios locales con Supabase', async () => {
    // Setup
    const testData = {
      cliente: {
        nombre: 'Test Cliente',
        telefono: '1234567890'
      }
    };
    
    // Test
    const result = await syncData(testData);
    
    // Assertions
    expect(result.synchronized).toBe(true);
  });
});
```

## Conclusión

Esta migración permitirá:
- Mejor experiencia de usuario con una aplicación nativa
- Trabajo offline con sincronización
- Escalabilidad con Supabase
- Mantenimiento más sencillo
- Base para futuras mejoras

## Próximos Pasos

1. Revisar y aprobar arquitectura propuesta
2. Crear proyecto piloto con funcionalidad básica
3. Migrar datos de prueba
4. Realizar pruebas de usuario
5. Planificar migración por fases
